# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-08-06 14:31
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import judge.models.interface
import judge.models.problem_data
import judge.utils.problem_data
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='post title')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('visible', models.BooleanField(default=False, verbose_name='public visibility')),
                ('sticky', models.BooleanField(default=False, verbose_name='sticky')),
                ('publish_on', models.DateTimeField(verbose_name='publish after')),
                ('content', models.TextField(verbose_name='post content')),
                ('summary', models.TextField(blank=True, verbose_name='post summary')),
                ('og_image', models.CharField(blank=True, default=b'', max_length=150, verbose_name='openGraph image')),
            ],
            options={
                'verbose_name': 'blog post',
                'verbose_name_plural': 'blog posts',
                'permissions': (('edit_all_post', 'Edit all posts'),),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='posted time')),
                ('page', models.CharField(db_index=True, max_length=30, validators=[django.core.validators.RegexValidator(b'^[pc]:[a-z0-9]+$|^b:\\d+$|^s:', 'Page code must be ^[pc]:[a-z0-9]+$|^b:\\d+$')], verbose_name='associated Page')),
                ('score', models.IntegerField(default=0, verbose_name='votes')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='title of comment')),
                ('body', models.TextField(max_length=8192, verbose_name='body of comment')),
                ('hidden', models.BooleanField(default=0, verbose_name='hide the comment')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
            },
        ),
        migrations.CreateModel(
            name='CommentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='judge.Comment')),
            ],
            options={
                'verbose_name': 'comment vote',
                'verbose_name_plural': 'comment votes',
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(b'^[a-z0-9]+$', 'Contest id must be ^[a-z0-9]+$')], verbose_name='contest id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='contest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('is_public', models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('is_rated', models.BooleanField(default=False, help_text='Whether this contest can be rated.', verbose_name='contest rated')),
                ('hide_scoreboard', models.BooleanField(default=False, help_text='Whether the scoreboard should remain hidden for the duration of the contest.', verbose_name='hide scoreboard')),
                ('use_clarifications', models.BooleanField(default=True, help_text='Use clarification system instead of comments.', verbose_name='no comments')),
                ('rate_all', models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all')),
                ('is_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only')),
                ('og_image', models.CharField(blank=True, default=b'', max_length=150, verbose_name='OpenGraph image')),
                ('user_count', models.IntegerField(default=0, verbose_name='the amount of live participants')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='contest summary')),
                ('access_code', models.CharField(blank=True, default=b'', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
            ],
            options={
                'verbose_name': 'contest',
                'verbose_name_plural': 'contests',
                'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contests'), ('contest_rating', 'Rate contests'), ('contest_access_code', 'Contest access codes')),
            },
        ),
        migrations.CreateModel(
            name='ContestParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_start', models.DateTimeField(db_column=b'start', default=django.utils.timezone.now, verbose_name='start time')),
                ('score', models.IntegerField(db_index=True, default=0, verbose_name='score')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation', verbose_name='virtual participation id')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='judge.Contest', verbose_name='associated contest')),
            ],
            options={
                'verbose_name': 'contest participation',
                'verbose_name_plural': 'contest participations',
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(default=0, help_text='Maximum number of submissions for this problem, or 0 for no limit.', validators=[django.core.validators.MinValueValidator(0, "Why include a problem you can't submit to?")])),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='judge.Contest', verbose_name='contest')),
            ],
            options={
                'verbose_name': 'contest problem',
                'verbose_name_plural': 'contest problems',
            },
        ),
        migrations.CreateModel(
            name='ContestSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(default=0.0, verbose_name='points')),
                ('is_pretest', models.BooleanField(default=False, help_text='Whether this submission was ran only on pretests.', verbose_name='is pretested')),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='judge.ContestParticipation', verbose_name='participation')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='judge.ContestProblem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'contest submission',
                'verbose_name_plural': 'contest submissions',
            },
        ),
        migrations.CreateModel(
            name='ContestTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(b'^[a-z-]+$', message='Lowercase letters and hyphens only.')], verbose_name='tag name')),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator(b'^#(?:[A-Fa-f0-9]{3}){1,2}$', 'Invalid colour.')], verbose_name='tag colour')),
                ('description', models.TextField(blank=True, verbose_name='tag description')),
            ],
            options={
                'verbose_name': 'contest tag',
                'verbose_name_plural': 'contest tags',
            },
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Server name, hostname-style', max_length=50, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time of creation')),
                ('auth_key', models.CharField(help_text='A key to authenticated this judge', max_length=100, verbose_name='authentication key')),
                ('online', models.BooleanField(default=False, verbose_name='judge online status')),
                ('start_time', models.DateTimeField(null=True, verbose_name='judge start time')),
                ('ping', models.FloatField(null=True, verbose_name='response time')),
                ('load', models.FloatField(help_text='Load for the last minute, divided by processors to be fair.', null=True, verbose_name='system load')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('last_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name=b'Last connected IP')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'judge',
                'verbose_name_plural': 'judges',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The identifier for this language; the same as its executor id for judges.', max_length=6, unique=True, verbose_name='short identifier')),
                ('name', models.CharField(help_text='Longer name for the language, e.g. "Python 2" or "C++11".', max_length=20, verbose_name='long name')),
                ('short_name', models.CharField(blank=True, help_text='More readable, but short, name to display publicly; e.g. "PY2" or "C++11". If left blank, it will default to the short identifier.', max_length=10, null=True, verbose_name='short name')),
                ('common_name', models.CharField(help_text='Common name for the language. For example, the common name for C++03, C++11, and C++14 would be "C++"', max_length=10, verbose_name='common name')),
                ('ace', models.CharField(help_text='Language ID for Ace.js editor highlighting, appended to "mode-" to determine the Ace JavaScript file to use, e.g., "python".', max_length=20, verbose_name='ace mode name')),
                ('pygments', models.CharField(help_text='Language ID for Pygments highlighting in source windows.', max_length=20, verbose_name='pygments name')),
                ('template', models.TextField(blank=True, help_text='Code template to display in submission editor.', verbose_name='code template')),
                ('info', models.CharField(blank=True, help_text="Do not set this unless you know what you're doing! It will override the usually more specific, judge-provided runtime info!", max_length=50, verbose_name='runtime info override')),
                ('description', models.TextField(blank=True, help_text='Use field this to inform users of quirks with your environment, additional restrictions, etc.', verbose_name='language description')),
                ('extension', models.CharField(help_text='The extension of source files, e.g., "py" or "cpp".', max_length=10, verbose_name='extension')),
            ],
            options={
                'ordering': ['key'],
                'verbose_name': 'language',
                'verbose_name_plural': 'languages',
            },
        ),
        migrations.CreateModel(
            name='LanguageLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_limit', models.FloatField(verbose_name='time limit')),
                ('memory_limit', models.IntegerField(verbose_name='memory limit')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Language', verbose_name='language')),
            ],
            options={
                'verbose_name': 'language-specific resource limit',
                'verbose_name_plural': 'language-specific resource limits',
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(b'^[-\\w.]+$', b'License key must be ^[-\\w.]+$')], verbose_name='key')),
                ('link', models.CharField(max_length=256, verbose_name='link')),
                ('name', models.CharField(max_length=256, verbose_name='full name')),
                ('display', models.CharField(blank=True, help_text='Displayed on pages under this license', max_length=256, verbose_name='short name')),
                ('icon', models.CharField(blank=True, help_text='URL to the icon', max_length=256, verbose_name='icon')),
                ('text', models.TextField(verbose_name='license text')),
            ],
            options={
                'verbose_name': 'license',
                'verbose_name_plural': 'licenses',
            },
        ),
        migrations.CreateModel(
            name='MiscConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, max_length=30)),
                ('value', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'configuration item',
                'verbose_name_plural': 'miscellaneous configuration',
            },
        ),
        migrations.CreateModel(
            name='NavigationBar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('key', models.CharField(max_length=10, unique=True, verbose_name='identifier')),
                ('label', models.CharField(max_length=20, verbose_name='label')),
                ('path', models.CharField(max_length=255, verbose_name='link path')),
                ('regex', models.TextField(validators=[judge.models.interface.validate_regex], verbose_name='highlight regex')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='judge.NavigationBar', verbose_name='parent item')),
            ],
            options={
                'verbose_name': 'navigation item',
                'verbose_name_plural': 'navigation bar',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='organization title')),
                ('key', models.CharField(help_text='Organization name shows in URL', max_length=6, unique=True, validators=[django.core.validators.RegexValidator(b'^[A-Za-z0-9]+$', b'Identifier must contain letters and numbers only')], verbose_name='identifier')),
                ('short_name', models.CharField(help_text='Displayed beside user name during contests', max_length=20, verbose_name='short name')),
                ('about', models.TextField(verbose_name='organization description')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('is_open', models.BooleanField(default=True, help_text='Allow joining organization', verbose_name='is open organization?')),
                ('slots', models.IntegerField(blank=True, help_text='Maximum amount of users in this organization, only applicable to private organizations', null=True, verbose_name='maximum size')),
                ('access_code', models.CharField(blank=True, help_text='Student access code', max_length=7, null=True, verbose_name='access code')),
            ],
            options={
                'ordering': ['key'],
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'permissions': (('organization_admin', 'Administer organizations'), ('edit_all_organization', 'Edit all organizations')),
            },
        ),
        migrations.CreateModel(
            name='OrganizationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='request time')),
                ('state', models.CharField(choices=[(b'P', b'Pending'), (b'A', b'Approved'), (b'R', b'Rejected')], max_length=1, verbose_name='state')),
                ('reason', models.TextField(verbose_name='reason')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='judge.Organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'organization join request',
                'verbose_name_plural': 'organization join requests',
            },
        ),
        migrations.CreateModel(
            name='PrivateMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='message title')),
                ('content', models.TextField(verbose_name='message body')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='message timestamp')),
                ('read', models.BooleanField(default=False, verbose_name='read')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateMessageThread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messages', models.ManyToManyField(to='judge.PrivateMessage', verbose_name='messages in the thread')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(b'^[a-z0-9]+$', 'Problem code must be ^[a-z0-9]+$')], verbose_name='problem code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='problem name')),
                ('description', models.TextField(verbose_name='problem body')),
                ('time_limit', models.FloatField(help_text='The time limit for this problem, in seconds. Fractional seconds (e.g. 1.5) are supported.', verbose_name='time limit')),
                ('memory_limit', models.IntegerField(help_text='The memory limit for this problem, in kilobytes (e.g. 64mb = 65536 kilobytes).', verbose_name='memory limit')),
                ('short_circuit', models.BooleanField(default=False)),
                ('points', models.FloatField(verbose_name='points')),
                ('partial', models.BooleanField(default=False, verbose_name='allows partial points')),
                ('is_public', models.BooleanField(db_index=True, default=False, verbose_name='publicly visible')),
                ('is_manually_managed', models.BooleanField(db_index=True, default=False, help_text='Whether judges should be allowed to manage data or not', verbose_name='manually managed')),
                ('date', models.DateTimeField(blank=True, db_index=True, help_text="Doesn't have magic ability to auto-publish due to backward compatibility", null=True, verbose_name='date of publishing')),
                ('og_image', models.CharField(blank=True, max_length=150, verbose_name='OpenGraph image')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='problem summary')),
                ('user_count', models.IntegerField(default=0, help_text='The amount of users on the best solutions page.', verbose_name='amount of users')),
                ('ac_rate', models.FloatField(default=0, verbose_name='rate of AC submissions')),
                ('allowed_languages', models.ManyToManyField(to='judge.Language', verbose_name='allowed languages')),
            ],
            options={
                'verbose_name': 'problem',
                'verbose_name_plural': 'problems',
                'permissions': (('see_private_problem', 'See hidden problems'), ('edit_own_problem', 'Edit own problems'), ('edit_all_problem', 'Edit all problems'), ('edit_public_problem', 'Edit all public problems'), ('clone_problem', 'Clone problem'), ('change_public_visibility', 'Change is_public field'), ('change_manually_managed', 'Change is_manually_managed field')),
            },
        ),
        migrations.CreateModel(
            name='ProblemClarification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='clarification body')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='clarification timestamp')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Problem', verbose_name='clarified problem')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zipfile', models.FileField(blank=True, null=True, storage=judge.utils.problem_data.ProblemDataStorage(), upload_to=judge.models.problem_data.problem_directory_file, verbose_name='data zip file')),
                ('generator', models.FileField(blank=True, null=True, storage=judge.utils.problem_data.ProblemDataStorage(), upload_to=judge.models.problem_data.problem_directory_file, verbose_name='generator file')),
                ('output_prefix', models.IntegerField(blank=True, null=True, verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, null=True, verbose_name='output limit length')),
                ('feedback', models.TextField(blank=True, verbose_name='init.yml generation feedback')),
                ('checker', models.CharField(blank=True, choices=[(b'standard', 'Standard'), (b'floats', 'Floats'), (b'floatsabs', 'Floats (absolute)'), (b'floatsrel', 'Floats (relative)'), (b'rstripped', 'Non-trailing spaces'), (b'sorted', 'Unordered'), (b'identical', 'Byte identical')], max_length=10, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data_files', to='judge.Problem', verbose_name='problem')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='problem group ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='problem group name')),
            ],
            options={
                'ordering': ['full_name'],
                'verbose_name': 'problem group',
                'verbose_name_plural': 'problem groups',
            },
        ),
        migrations.CreateModel(
            name='ProblemTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='case position')),
                ('type', models.CharField(choices=[(b'C', 'Normal case'), (b'S', 'Batch start'), (b'E', 'Batch end')], default=b'C', max_length=1, verbose_name='case type')),
                ('input_file', models.CharField(blank=True, max_length=100, verbose_name='input file name')),
                ('output_file', models.CharField(blank=True, max_length=100, verbose_name='output file name')),
                ('generator_args', models.TextField(blank=True, verbose_name='generator arguments')),
                ('points', models.IntegerField(blank=True, null=True, verbose_name='point value')),
                ('is_pretest', models.BooleanField(verbose_name='case is pretest?')),
                ('output_prefix', models.IntegerField(blank=True, null=True, verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, null=True, verbose_name='output limit length')),
                ('checker', models.CharField(blank=True, choices=[(b'standard', 'Standard'), (b'floats', 'Floats'), (b'floatsabs', 'Floats (absolute)'), (b'floatsrel', 'Floats (relative)'), (b'rstripped', 'Non-trailing spaces'), (b'sorted', 'Unordered'), (b'identical', 'Byte identical')], max_length=10, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='judge.Problem', verbose_name='problem data set')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[(b'en', 'English'), (b'tr', 'Turkish')], max_length=7, verbose_name='language')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='translated name')),
                ('description', models.TextField(verbose_name='translated description')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='judge.Problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'problem translation',
                'verbose_name_plural': 'problem translations',
            },
        ),
        migrations.CreateModel(
            name='ProblemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='problem category ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='problem category name')),
            ],
            options={
                'ordering': ['full_name'],
                'verbose_name': 'problem type',
                'verbose_name_plural': 'problem types',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='display name')),
                ('about', models.TextField(blank=True, null=True, verbose_name='self-description')),
                ('timezone', models.CharField(choices=[(b'Africa', [(b'Africa/Abidjan', b'Abidjan'), (b'Africa/Accra', b'Accra'), (b'Africa/Addis_Ababa', b'Addis_Ababa'), (b'Africa/Algiers', b'Algiers'), (b'Africa/Asmara', b'Asmara'), (b'Africa/Asmera', b'Asmera'), (b'Africa/Bamako', b'Bamako'), (b'Africa/Bangui', b'Bangui'), (b'Africa/Banjul', b'Banjul'), (b'Africa/Bissau', b'Bissau'), (b'Africa/Blantyre', b'Blantyre'), (b'Africa/Brazzaville', b'Brazzaville'), (b'Africa/Bujumbura', b'Bujumbura'), (b'Africa/Cairo', b'Cairo'), (b'Africa/Casablanca', b'Casablanca'), (b'Africa/Ceuta', b'Ceuta'), (b'Africa/Conakry', b'Conakry'), (b'Africa/Dakar', b'Dakar'), (b'Africa/Dar_es_Salaam', b'Dar_es_Salaam'), (b'Africa/Djibouti', b'Djibouti'), (b'Africa/Douala', b'Douala'), (b'Africa/El_Aaiun', b'El_Aaiun'), (b'Africa/Freetown', b'Freetown'), (b'Africa/Gaborone', b'Gaborone'), (b'Africa/Harare', b'Harare'), (b'Africa/Johannesburg', b'Johannesburg'), (b'Africa/Juba', b'Juba'), (b'Africa/Kampala', b'Kampala'), (b'Africa/Khartoum', b'Khartoum'), (b'Africa/Kigali', b'Kigali'), (b'Africa/Kinshasa', b'Kinshasa'), (b'Africa/Lagos', b'Lagos'), (b'Africa/Libreville', b'Libreville'), (b'Africa/Lome', b'Lome'), (b'Africa/Luanda', b'Luanda'), (b'Africa/Lubumbashi', b'Lubumbashi'), (b'Africa/Lusaka', b'Lusaka'), (b'Africa/Malabo', b'Malabo'), (b'Africa/Maputo', b'Maputo'), (b'Africa/Maseru', b'Maseru'), (b'Africa/Mbabane', b'Mbabane'), (b'Africa/Mogadishu', b'Mogadishu'), (b'Africa/Monrovia', b'Monrovia'), (b'Africa/Nairobi', b'Nairobi'), (b'Africa/Ndjamena', b'Ndjamena'), (b'Africa/Niamey', b'Niamey'), (b'Africa/Nouakchott', b'Nouakchott'), (b'Africa/Ouagadougou', b'Ouagadougou'), (b'Africa/Porto-Novo', b'Porto-Novo'), (b'Africa/Sao_Tome', b'Sao_Tome'), (b'Africa/Timbuktu', b'Timbuktu'), (b'Africa/Tripoli', b'Tripoli'), (b'Africa/Tunis', b'Tunis'), (b'Africa/Windhoek', b'Windhoek')]), (b'America', [(b'America/Adak', b'Adak'), (b'America/Anchorage', b'Anchorage'), (b'America/Anguilla', b'Anguilla'), (b'America/Antigua', b'Antigua'), (b'America/Araguaina', b'Araguaina'), (b'America/Argentina/Buenos_Aires', b'Argentina/Buenos_Aires'), (b'America/Argentina/Catamarca', b'Argentina/Catamarca'), (b'America/Argentina/ComodRivadavia', b'Argentina/ComodRivadavia'), (b'America/Argentina/Cordoba', b'Argentina/Cordoba'), (b'America/Argentina/Jujuy', b'Argentina/Jujuy'), (b'America/Argentina/La_Rioja', b'Argentina/La_Rioja'), (b'America/Argentina/Mendoza', b'Argentina/Mendoza'), (b'America/Argentina/Rio_Gallegos', b'Argentina/Rio_Gallegos'), (b'America/Argentina/Salta', b'Argentina/Salta'), (b'America/Argentina/San_Juan', b'Argentina/San_Juan'), (b'America/Argentina/San_Luis', b'Argentina/San_Luis'), (b'America/Argentina/Tucuman', b'Argentina/Tucuman'), (b'America/Argentina/Ushuaia', b'Argentina/Ushuaia'), (b'America/Aruba', b'Aruba'), (b'America/Asuncion', b'Asuncion'), (b'America/Atikokan', b'Atikokan'), (b'America/Atka', b'Atka'), (b'America/Bahia', b'Bahia'), (b'America/Bahia_Banderas', b'Bahia_Banderas'), (b'America/Barbados', b'Barbados'), (b'America/Belem', b'Belem'), (b'America/Belize', b'Belize'), (b'America/Blanc-Sablon', b'Blanc-Sablon'), (b'America/Boa_Vista', b'Boa_Vista'), (b'America/Bogota', b'Bogota'), (b'America/Boise', b'Boise'), (b'America/Buenos_Aires', b'Buenos_Aires'), (b'America/Cambridge_Bay', b'Cambridge_Bay'), (b'America/Campo_Grande', b'Campo_Grande'), (b'America/Cancun', b'Cancun'), (b'America/Caracas', b'Caracas'), (b'America/Catamarca', b'Catamarca'), (b'America/Cayenne', b'Cayenne'), (b'America/Cayman', b'Cayman'), (b'America/Chicago', b'Chicago'), (b'America/Chihuahua', b'Chihuahua'), (b'America/Coral_Harbour', b'Coral_Harbour'), (b'America/Cordoba', b'Cordoba'), (b'America/Costa_Rica', b'Costa_Rica'), (b'America/Creston', b'Creston'), (b'America/Cuiaba', b'Cuiaba'), (b'America/Curacao', b'Curacao'), (b'America/Danmarkshavn', b'Danmarkshavn'), (b'America/Dawson', b'Dawson'), (b'America/Dawson_Creek', b'Dawson_Creek'), (b'America/Denver', b'Denver'), (b'America/Detroit', b'Detroit'), (b'America/Dominica', b'Dominica'), (b'America/Edmonton', b'Edmonton'), (b'America/Eirunepe', b'Eirunepe'), (b'America/El_Salvador', b'El_Salvador'), (b'America/Ensenada', b'Ensenada'), (b'America/Fort_Nelson', b'Fort_Nelson'), (b'America/Fort_Wayne', b'Fort_Wayne'), (b'America/Fortaleza', b'Fortaleza'), (b'America/Glace_Bay', b'Glace_Bay'), (b'America/Godthab', b'Godthab'), (b'America/Goose_Bay', b'Goose_Bay'), (b'America/Grand_Turk', b'Grand_Turk'), (b'America/Grenada', b'Grenada'), (b'America/Guadeloupe', b'Guadeloupe'), (b'America/Guatemala', b'Guatemala'), (b'America/Guayaquil', b'Guayaquil'), (b'America/Guyana', b'Guyana'), (b'America/Halifax', b'Halifax'), (b'America/Havana', b'Havana'), (b'America/Hermosillo', b'Hermosillo'), (b'America/Indiana/Indianapolis', b'Indiana/Indianapolis'), (b'America/Indiana/Knox', b'Indiana/Knox'), (b'America/Indiana/Marengo', b'Indiana/Marengo'), (b'America/Indiana/Petersburg', b'Indiana/Petersburg'), (b'America/Indiana/Tell_City', b'Indiana/Tell_City'), (b'America/Indiana/Vevay', b'Indiana/Vevay'), (b'America/Indiana/Vincennes', b'Indiana/Vincennes'), (b'America/Indiana/Winamac', b'Indiana/Winamac'), (b'America/Indianapolis', b'Indianapolis'), (b'America/Inuvik', b'Inuvik'), (b'America/Iqaluit', b'Iqaluit'), (b'America/Jamaica', b'Jamaica'), (b'America/Jujuy', b'Jujuy'), (b'America/Juneau', b'Juneau'), (b'America/Kentucky/Louisville', b'Kentucky/Louisville'), (b'America/Kentucky/Monticello', b'Kentucky/Monticello'), (b'America/Knox_IN', b'Knox_IN'), (b'America/Kralendijk', b'Kralendijk'), (b'America/La_Paz', b'La_Paz'), (b'America/Lima', b'Lima'), (b'America/Los_Angeles', b'Los_Angeles'), (b'America/Louisville', b'Louisville'), (b'America/Lower_Princes', b'Lower_Princes'), (b'America/Maceio', b'Maceio'), (b'America/Managua', b'Managua'), (b'America/Manaus', b'Manaus'), (b'America/Marigot', b'Marigot'), (b'America/Martinique', b'Martinique'), (b'America/Matamoros', b'Matamoros'), (b'America/Mazatlan', b'Mazatlan'), (b'America/Mendoza', b'Mendoza'), (b'America/Menominee', b'Menominee'), (b'America/Merida', b'Merida'), (b'America/Metlakatla', b'Metlakatla'), (b'America/Mexico_City', b'Mexico_City'), (b'America/Miquelon', b'Miquelon'), (b'America/Moncton', b'Moncton'), (b'America/Monterrey', b'Monterrey'), (b'America/Montevideo', b'Montevideo'), (b'America/Montreal', b'Montreal'), (b'America/Montserrat', b'Montserrat'), (b'America/Nassau', b'Nassau'), (b'America/New_York', b'New_York'), (b'America/Nipigon', b'Nipigon'), (b'America/Nome', b'Nome'), (b'America/Noronha', b'Noronha'), (b'America/North_Dakota/Beulah', b'North_Dakota/Beulah'), (b'America/North_Dakota/Center', b'North_Dakota/Center'), (b'America/North_Dakota/New_Salem', b'North_Dakota/New_Salem'), (b'America/Ojinaga', b'Ojinaga'), (b'America/Panama', b'Panama'), (b'America/Pangnirtung', b'Pangnirtung'), (b'America/Paramaribo', b'Paramaribo'), (b'America/Phoenix', b'Phoenix'), (b'America/Port-au-Prince', b'Port-au-Prince'), (b'America/Port_of_Spain', b'Port_of_Spain'), (b'America/Porto_Acre', b'Porto_Acre'), (b'America/Porto_Velho', b'Porto_Velho'), (b'America/Puerto_Rico', b'Puerto_Rico'), (b'America/Punta_Arenas', b'Punta_Arenas'), (b'America/Rainy_River', b'Rainy_River'), (b'America/Rankin_Inlet', b'Rankin_Inlet'), (b'America/Recife', b'Recife'), (b'America/Regina', b'Regina'), (b'America/Resolute', b'Resolute'), (b'America/Rio_Branco', b'Rio_Branco'), (b'America/Rosario', b'Rosario'), (b'America/Santa_Isabel', b'Santa_Isabel'), (b'America/Santarem', b'Santarem'), (b'America/Santiago', b'Santiago'), (b'America/Santo_Domingo', b'Santo_Domingo'), (b'America/Sao_Paulo', b'Sao_Paulo'), (b'America/Scoresbysund', b'Scoresbysund'), (b'America/Shiprock', b'Shiprock'), (b'America/Sitka', b'Sitka'), (b'America/St_Barthelemy', b'St_Barthelemy'), (b'America/St_Johns', b'St_Johns'), (b'America/St_Kitts', b'St_Kitts'), (b'America/St_Lucia', b'St_Lucia'), (b'America/St_Thomas', b'St_Thomas'), (b'America/St_Vincent', b'St_Vincent'), (b'America/Swift_Current', b'Swift_Current'), (b'America/Tegucigalpa', b'Tegucigalpa'), (b'America/Thule', b'Thule'), (b'America/Thunder_Bay', b'Thunder_Bay'), (b'America/Tijuana', b'Tijuana'), (b'America/Toronto', b'Toronto'), (b'America/Tortola', b'Tortola'), (b'America/Vancouver', b'Vancouver'), (b'America/Virgin', b'Virgin'), (b'America/Whitehorse', b'Whitehorse'), (b'America/Winnipeg', b'Winnipeg'), (b'America/Yakutat', b'Yakutat'), (b'America/Yellowknife', b'Yellowknife')]), (b'Antarctica', [(b'Antarctica/Casey', b'Casey'), (b'Antarctica/Davis', b'Davis'), (b'Antarctica/DumontDUrville', b'DumontDUrville'), (b'Antarctica/Macquarie', b'Macquarie'), (b'Antarctica/Mawson', b'Mawson'), (b'Antarctica/McMurdo', b'McMurdo'), (b'Antarctica/Palmer', b'Palmer'), (b'Antarctica/Rothera', b'Rothera'), (b'Antarctica/South_Pole', b'South_Pole'), (b'Antarctica/Syowa', b'Syowa'), (b'Antarctica/Troll', b'Troll'), (b'Antarctica/Vostok', b'Vostok')]), (b'Arctic', [(b'Arctic/Longyearbyen', b'Longyearbyen')]), (b'Asia', [(b'Asia/Aden', b'Aden'), (b'Asia/Almaty', b'Almaty'), (b'Asia/Amman', b'Amman'), (b'Asia/Anadyr', b'Anadyr'), (b'Asia/Aqtau', b'Aqtau'), (b'Asia/Aqtobe', b'Aqtobe'), (b'Asia/Ashgabat', b'Ashgabat'), (b'Asia/Ashkhabad', b'Ashkhabad'), (b'Asia/Atyrau', b'Atyrau'), (b'Asia/Baghdad', b'Baghdad'), (b'Asia/Bahrain', b'Bahrain'), (b'Asia/Baku', b'Baku'), (b'Asia/Bangkok', b'Bangkok'), (b'Asia/Barnaul', b'Barnaul'), (b'Asia/Beirut', b'Beirut'), (b'Asia/Bishkek', b'Bishkek'), (b'Asia/Brunei', b'Brunei'), (b'Asia/Calcutta', b'Calcutta'), (b'Asia/Chita', b'Chita'), (b'Asia/Choibalsan', b'Choibalsan'), (b'Asia/Chongqing', b'Chongqing'), (b'Asia/Chungking', b'Chungking'), (b'Asia/Colombo', b'Colombo'), (b'Asia/Dacca', b'Dacca'), (b'Asia/Damascus', b'Damascus'), (b'Asia/Dhaka', b'Dhaka'), (b'Asia/Dili', b'Dili'), (b'Asia/Dubai', b'Dubai'), (b'Asia/Dushanbe', b'Dushanbe'), (b'Asia/Famagusta', b'Famagusta'), (b'Asia/Gaza', b'Gaza'), (b'Asia/Harbin', b'Harbin'), (b'Asia/Hebron', b'Hebron'), (b'Asia/Ho_Chi_Minh', b'Ho_Chi_Minh'), (b'Asia/Hong_Kong', b'Hong_Kong'), (b'Asia/Hovd', b'Hovd'), (b'Asia/Irkutsk', b'Irkutsk'), (b'Asia/Istanbul', b'Istanbul'), (b'Asia/Jakarta', b'Jakarta'), (b'Asia/Jayapura', b'Jayapura'), (b'Asia/Jerusalem', b'Jerusalem'), (b'Asia/Kabul', b'Kabul'), (b'Asia/Kamchatka', b'Kamchatka'), (b'Asia/Karachi', b'Karachi'), (b'Asia/Kashgar', b'Kashgar'), (b'Asia/Kathmandu', b'Kathmandu'), (b'Asia/Katmandu', b'Katmandu'), (b'Asia/Khandyga', b'Khandyga'), (b'Asia/Kolkata', b'Kolkata'), (b'Asia/Krasnoyarsk', b'Krasnoyarsk'), (b'Asia/Kuala_Lumpur', b'Kuala_Lumpur'), (b'Asia/Kuching', b'Kuching'), (b'Asia/Kuwait', b'Kuwait'), (b'Asia/Macao', b'Macao'), (b'Asia/Macau', b'Macau'), (b'Asia/Magadan', b'Magadan'), (b'Asia/Makassar', b'Makassar'), (b'Asia/Manila', b'Manila'), (b'Asia/Muscat', b'Muscat'), (b'Asia/Nicosia', b'Nicosia'), (b'Asia/Novokuznetsk', b'Novokuznetsk'), (b'Asia/Novosibirsk', b'Novosibirsk'), (b'Asia/Omsk', b'Omsk'), (b'Asia/Oral', b'Oral'), (b'Asia/Phnom_Penh', b'Phnom_Penh'), (b'Asia/Pontianak', b'Pontianak'), (b'Asia/Pyongyang', b'Pyongyang'), (b'Asia/Qatar', b'Qatar'), (b'Asia/Qyzylorda', b'Qyzylorda'), (b'Asia/Rangoon', b'Rangoon'), (b'Asia/Riyadh', b'Riyadh'), (b'Asia/Saigon', b'Saigon'), (b'Asia/Sakhalin', b'Sakhalin'), (b'Asia/Samarkand', b'Samarkand'), (b'Asia/Seoul', b'Seoul'), (b'Asia/Shanghai', b'Shanghai'), (b'Asia/Singapore', b'Singapore'), (b'Asia/Srednekolymsk', b'Srednekolymsk'), (b'Asia/Taipei', b'Taipei'), (b'Asia/Tashkent', b'Tashkent'), (b'Asia/Tbilisi', b'Tbilisi'), (b'Asia/Tehran', b'Tehran'), (b'Asia/Tel_Aviv', b'Tel_Aviv'), (b'Asia/Thimbu', b'Thimbu'), (b'Asia/Thimphu', b'Thimphu'), (b'Asia/Tokyo', b'Tokyo'), (b'Asia/Tomsk', b'Tomsk'), (b'Asia/Ujung_Pandang', b'Ujung_Pandang'), (b'Asia/Ulaanbaatar', b'Ulaanbaatar'), (b'Asia/Ulan_Bator', b'Ulan_Bator'), (b'Asia/Urumqi', b'Urumqi'), (b'Asia/Ust-Nera', b'Ust-Nera'), (b'Asia/Vientiane', b'Vientiane'), (b'Asia/Vladivostok', b'Vladivostok'), (b'Asia/Yakutsk', b'Yakutsk'), (b'Asia/Yangon', b'Yangon'), (b'Asia/Yekaterinburg', b'Yekaterinburg'), (b'Asia/Yerevan', b'Yerevan')]), (b'Atlantic', [(b'Atlantic/Azores', b'Azores'), (b'Atlantic/Bermuda', b'Bermuda'), (b'Atlantic/Canary', b'Canary'), (b'Atlantic/Cape_Verde', b'Cape_Verde'), (b'Atlantic/Faeroe', b'Faeroe'), (b'Atlantic/Faroe', b'Faroe'), (b'Atlantic/Jan_Mayen', b'Jan_Mayen'), (b'Atlantic/Madeira', b'Madeira'), (b'Atlantic/Reykjavik', b'Reykjavik'), (b'Atlantic/South_Georgia', b'South_Georgia'), (b'Atlantic/St_Helena', b'St_Helena'), (b'Atlantic/Stanley', b'Stanley')]), (b'Australia', [(b'Australia/ACT', b'ACT'), (b'Australia/Adelaide', b'Adelaide'), (b'Australia/Brisbane', b'Brisbane'), (b'Australia/Broken_Hill', b'Broken_Hill'), (b'Australia/Canberra', b'Canberra'), (b'Australia/Currie', b'Currie'), (b'Australia/Darwin', b'Darwin'), (b'Australia/Eucla', b'Eucla'), (b'Australia/Hobart', b'Hobart'), (b'Australia/LHI', b'LHI'), (b'Australia/Lindeman', b'Lindeman'), (b'Australia/Lord_Howe', b'Lord_Howe'), (b'Australia/Melbourne', b'Melbourne'), (b'Australia/NSW', b'NSW'), (b'Australia/North', b'North'), (b'Australia/Perth', b'Perth'), (b'Australia/Queensland', b'Queensland'), (b'Australia/South', b'South'), (b'Australia/Sydney', b'Sydney'), (b'Australia/Tasmania', b'Tasmania'), (b'Australia/Victoria', b'Victoria'), (b'Australia/West', b'West'), (b'Australia/Yancowinna', b'Yancowinna')]), (b'Brazil', [(b'Brazil/Acre', b'Acre'), (b'Brazil/DeNoronha', b'DeNoronha'), (b'Brazil/East', b'East'), (b'Brazil/West', b'West')]), (b'Canada', [(b'Canada/Atlantic', b'Atlantic'), (b'Canada/Central', b'Central'), (b'Canada/Eastern', b'Eastern'), (b'Canada/Mountain', b'Mountain'), (b'Canada/Newfoundland', b'Newfoundland'), (b'Canada/Pacific', b'Pacific'), (b'Canada/Saskatchewan', b'Saskatchewan'), (b'Canada/Yukon', b'Yukon')]), (b'Chile', [(b'Chile/Continental', b'Continental'), (b'Chile/EasterIsland', b'EasterIsland')]), (b'Etc', [(b'Etc/Greenwich', b'Greenwich'), (b'Etc/UCT', b'UCT'), (b'Etc/UTC', b'UTC'), (b'Etc/Universal', b'Universal'), (b'Etc/Zulu', b'Zulu')]), (b'Europe', [(b'Europe/Amsterdam', b'Amsterdam'), (b'Europe/Andorra', b'Andorra'), (b'Europe/Astrakhan', b'Astrakhan'), (b'Europe/Athens', b'Athens'), (b'Europe/Belfast', b'Belfast'), (b'Europe/Belgrade', b'Belgrade'), (b'Europe/Berlin', b'Berlin'), (b'Europe/Bratislava', b'Bratislava'), (b'Europe/Brussels', b'Brussels'), (b'Europe/Bucharest', b'Bucharest'), (b'Europe/Budapest', b'Budapest'), (b'Europe/Busingen', b'Busingen'), (b'Europe/Chisinau', b'Chisinau'), (b'Europe/Copenhagen', b'Copenhagen'), (b'Europe/Dublin', b'Dublin'), (b'Europe/Gibraltar', b'Gibraltar'), (b'Europe/Guernsey', b'Guernsey'), (b'Europe/Helsinki', b'Helsinki'), (b'Europe/Isle_of_Man', b'Isle_of_Man'), (b'Europe/Istanbul', b'Istanbul'), (b'Europe/Jersey', b'Jersey'), (b'Europe/Kaliningrad', b'Kaliningrad'), (b'Europe/Kiev', b'Kiev'), (b'Europe/Kirov', b'Kirov'), (b'Europe/Lisbon', b'Lisbon'), (b'Europe/Ljubljana', b'Ljubljana'), (b'Europe/London', b'London'), (b'Europe/Luxembourg', b'Luxembourg'), (b'Europe/Madrid', b'Madrid'), (b'Europe/Malta', b'Malta'), (b'Europe/Mariehamn', b'Mariehamn'), (b'Europe/Minsk', b'Minsk'), (b'Europe/Monaco', b'Monaco'), (b'Europe/Moscow', b'Moscow'), (b'Europe/Nicosia', b'Nicosia'), (b'Europe/Oslo', b'Oslo'), (b'Europe/Paris', b'Paris'), (b'Europe/Podgorica', b'Podgorica'), (b'Europe/Prague', b'Prague'), (b'Europe/Riga', b'Riga'), (b'Europe/Rome', b'Rome'), (b'Europe/Samara', b'Samara'), (b'Europe/San_Marino', b'San_Marino'), (b'Europe/Sarajevo', b'Sarajevo'), (b'Europe/Saratov', b'Saratov'), (b'Europe/Simferopol', b'Simferopol'), (b'Europe/Skopje', b'Skopje'), (b'Europe/Sofia', b'Sofia'), (b'Europe/Stockholm', b'Stockholm'), (b'Europe/Tallinn', b'Tallinn'), (b'Europe/Tirane', b'Tirane'), (b'Europe/Tiraspol', b'Tiraspol'), (b'Europe/Ulyanovsk', b'Ulyanovsk'), (b'Europe/Uzhgorod', b'Uzhgorod'), (b'Europe/Vaduz', b'Vaduz'), (b'Europe/Vatican', b'Vatican'), (b'Europe/Vienna', b'Vienna'), (b'Europe/Vilnius', b'Vilnius'), (b'Europe/Volgograd', b'Volgograd'), (b'Europe/Warsaw', b'Warsaw'), (b'Europe/Zagreb', b'Zagreb'), (b'Europe/Zaporozhye', b'Zaporozhye'), (b'Europe/Zurich', b'Zurich')]), (b'Indian', [(b'Indian/Antananarivo', b'Antananarivo'), (b'Indian/Chagos', b'Chagos'), (b'Indian/Christmas', b'Christmas'), (b'Indian/Cocos', b'Cocos'), (b'Indian/Comoro', b'Comoro'), (b'Indian/Kerguelen', b'Kerguelen'), (b'Indian/Mahe', b'Mahe'), (b'Indian/Maldives', b'Maldives'), (b'Indian/Mauritius', b'Mauritius'), (b'Indian/Mayotte', b'Mayotte'), (b'Indian/Reunion', b'Reunion')]), (b'Mexico', [(b'Mexico/BajaNorte', b'BajaNorte'), (b'Mexico/BajaSur', b'BajaSur'), (b'Mexico/General', b'General')]), (b'Other', [(b'CET', b'CET'), (b'CST6CDT', b'CST6CDT'), (b'Cuba', b'Cuba'), (b'EET', b'EET'), (b'EST', b'EST'), (b'EST5EDT', b'EST5EDT'), (b'Egypt', b'Egypt'), (b'Eire', b'Eire'), (b'GB', b'GB'), (b'GB-Eire', b'GB-Eire'), (b'Greenwich', b'Greenwich'), (b'HST', b'HST'), (b'Hongkong', b'Hongkong'), (b'Iceland', b'Iceland'), (b'Iran', b'Iran'), (b'Israel', b'Israel'), (b'Jamaica', b'Jamaica'), (b'Japan', b'Japan'), (b'Kwajalein', b'Kwajalein'), (b'Libya', b'Libya'), (b'MET', b'MET'), (b'MST', b'MST'), (b'MST7MDT', b'MST7MDT'), (b'NZ', b'NZ'), (b'NZ-CHAT', b'NZ-CHAT'), (b'Navajo', b'Navajo'), (b'PRC', b'PRC'), (b'PST8PDT', b'PST8PDT'), (b'Poland', b'Poland'), (b'Portugal', b'Portugal'), (b'ROC', b'ROC'), (b'ROK', b'ROK'), (b'Singapore', b'Singapore'), (b'Turkey', b'Turkey'), (b'UCT', b'UCT'), (b'UTC', b'UTC'), (b'Universal', b'Universal'), (b'W-SU', b'W-SU'), (b'WET', b'WET'), (b'Zulu', b'Zulu')]), (b'Pacific', [(b'Pacific/Apia', b'Apia'), (b'Pacific/Auckland', b'Auckland'), (b'Pacific/Bougainville', b'Bougainville'), (b'Pacific/Chatham', b'Chatham'), (b'Pacific/Chuuk', b'Chuuk'), (b'Pacific/Easter', b'Easter'), (b'Pacific/Efate', b'Efate'), (b'Pacific/Enderbury', b'Enderbury'), (b'Pacific/Fakaofo', b'Fakaofo'), (b'Pacific/Fiji', b'Fiji'), (b'Pacific/Funafuti', b'Funafuti'), (b'Pacific/Galapagos', b'Galapagos'), (b'Pacific/Gambier', b'Gambier'), (b'Pacific/Guadalcanal', b'Guadalcanal'), (b'Pacific/Guam', b'Guam'), (b'Pacific/Honolulu', b'Honolulu'), (b'Pacific/Johnston', b'Johnston'), (b'Pacific/Kiritimati', b'Kiritimati'), (b'Pacific/Kosrae', b'Kosrae'), (b'Pacific/Kwajalein', b'Kwajalein'), (b'Pacific/Majuro', b'Majuro'), (b'Pacific/Marquesas', b'Marquesas'), (b'Pacific/Midway', b'Midway'), (b'Pacific/Nauru', b'Nauru'), (b'Pacific/Niue', b'Niue'), (b'Pacific/Norfolk', b'Norfolk'), (b'Pacific/Noumea', b'Noumea'), (b'Pacific/Pago_Pago', b'Pago_Pago'), (b'Pacific/Palau', b'Palau'), (b'Pacific/Pitcairn', b'Pitcairn'), (b'Pacific/Pohnpei', b'Pohnpei'), (b'Pacific/Ponape', b'Ponape'), (b'Pacific/Port_Moresby', b'Port_Moresby'), (b'Pacific/Rarotonga', b'Rarotonga'), (b'Pacific/Saipan', b'Saipan'), (b'Pacific/Samoa', b'Samoa'), (b'Pacific/Tahiti', b'Tahiti'), (b'Pacific/Tarawa', b'Tarawa'), (b'Pacific/Tongatapu', b'Tongatapu'), (b'Pacific/Truk', b'Truk'), (b'Pacific/Wake', b'Wake'), (b'Pacific/Wallis', b'Wallis'), (b'Pacific/Yap', b'Yap')]), (b'US', [(b'US/Alaska', b'Alaska'), (b'US/Aleutian', b'Aleutian'), (b'US/Arizona', b'Arizona'), (b'US/Central', b'Central'), (b'US/East-Indiana', b'East-Indiana'), (b'US/Eastern', b'Eastern'), (b'US/Hawaii', b'Hawaii'), (b'US/Indiana-Starke', b'Indiana-Starke'), (b'US/Michigan', b'Michigan'), (b'US/Mountain', b'Mountain'), (b'US/Pacific', b'Pacific'), (b'US/Samoa', b'Samoa')])], default=b'America/Toronto', max_length=50, verbose_name='location')),
                ('points', models.FloatField(db_index=True, default=0)),
                ('performance_points', models.FloatField(db_index=True, default=0)),
                ('problem_count', models.IntegerField(db_index=True, default=0)),
                ('ace_theme', models.CharField(choices=[(b'ambiance', b'Ambiance'), (b'chaos', b'Chaos'), (b'chrome', b'Chrome'), (b'clouds', b'Clouds'), (b'clouds_midnight', b'Clouds Midnight'), (b'cobalt', b'Cobalt'), (b'crimson_editor', b'Crimson Editor'), (b'dawn', b'Dawn'), (b'dreamweaver', b'Dreamweaver'), (b'eclipse', b'Eclipse'), (b'github', b'Github'), (b'idle_fingers', b'Idle Fingers'), (b'katzenmilch', b'Katzenmilch'), (b'kr_theme', b'KR Theme'), (b'kuroir', b'Kuroir'), (b'merbivore', b'Merbivore'), (b'merbivore_soft', b'Merbivore Soft'), (b'mono_industrial', b'Mono Industrial'), (b'monokai', b'Monokai'), (b'pastel_on_dark', b'Pastel on Dark'), (b'solarized_dark', b'Solarized Dark'), (b'solarized_light', b'Solarized Light'), (b'terminal', b'Terminal'), (b'textmate', b'Textmate'), (b'tomorrow', b'Tomorrow'), (b'tomorrow_night', b'Tomorrow Night'), (b'tomorrow_night_blue', b'Tomorrow Night Blue'), (b'tomorrow_night_bright', b'Tomorrow Night Bright'), (b'tomorrow_night_eighties', b'Tomorrow Night Eighties'), (b'twilight', b'Twilight'), (b'vibrant_ink', b'Vibrant Ink'), (b'xcode', b'XCode')], default=b'github', max_length=30)),
                ('last_access', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last access time')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last IP')),
                ('display_rank', models.CharField(choices=[(b'user', b'Normal User'), (b'setter', b'Problem Setter'), (b'admin', b'Admin')], default=b'user', max_length=10, verbose_name='display rank')),
                ('mute', models.BooleanField(default=False, help_text='Some users are at their best when silent.', verbose_name='comment mute')),
                ('rating', models.IntegerField(default=None, null=True)),
                ('user_script', models.TextField(blank=True, default=b'', help_text='User-defined JavaScript for site customization.', max_length=65536, verbose_name='user script')),
                ('math_engine', models.CharField(choices=[(b'tex', 'Leave as LaTeX'), (b'svg', 'SVG with PNG fallback'), (b'mml', 'MathML only'), (b'jax', 'MathJax with SVG/PNG fallback'), (b'auto', 'Detect best quality')], default=b'auto', help_text='the rendering engine used to render math', max_length=4, verbose_name='math engine')),
                ('current_contest', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='judge.ContestParticipation', verbose_name='current contest')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Language', verbose_name='preferred language')),
                ('organizations', models.ManyToManyField(blank=True, related_name='members', related_query_name='member', to='judge.Organization', verbose_name='organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user associated')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
                'permissions': (('test_site', 'Shows in-progress development stuff'),),
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(verbose_name='rank')),
                ('rating', models.IntegerField(verbose_name='rating')),
                ('volatility', models.IntegerField(verbose_name='volatility')),
                ('last_rated', models.DateTimeField(db_index=True, verbose_name='last rated')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='judge.Contest', verbose_name='contest')),
                ('participation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='judge.ContestParticipation', verbose_name='participation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='judge.Profile', verbose_name='user')),
            ],
            options={
                'verbose_name': 'contest rating',
                'verbose_name_plural': 'contest ratings',
            },
        ),
        migrations.CreateModel(
            name='RuntimeVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='runtime name')),
                ('version', models.CharField(blank=True, max_length=64, verbose_name='runtime version')),
                ('priority', models.IntegerField(default=0, verbose_name='order in which to display this runtime')),
                ('judge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Judge', verbose_name='judge on which this runtime exists')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Language', verbose_name='language to which this runtime belongs')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False, verbose_name='public visibility')),
                ('publish_on', models.DateTimeField(verbose_name='publish date')),
                ('content', models.TextField(verbose_name='editorial content')),
                ('authors', models.ManyToManyField(blank=True, to='judge.Profile', verbose_name='authors')),
                ('problem', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solution', to='judge.Problem', verbose_name='associated problem')),
            ],
            options={
                'verbose_name': 'solution',
                'verbose_name_plural': 'solutions',
                'permissions': (('see_private_solution', 'See hidden solutions'),),
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='submission time')),
                ('time', models.FloatField(db_index=True, null=True, verbose_name='execution time')),
                ('memory', models.FloatField(null=True, verbose_name='memory usage')),
                ('points', models.FloatField(db_index=True, null=True, verbose_name='points granted')),
                ('source', models.TextField(max_length=65536, verbose_name='source code')),
                ('status', models.CharField(choices=[(b'QU', 'Queued'), (b'P', 'Processing'), (b'G', 'Grading'), (b'D', 'Completed'), (b'IE', 'Internal Error'), (b'CE', 'Compile Error'), (b'AB', 'Aborted')], db_index=True, default=b'QU', max_length=2, verbose_name='status')),
                ('result', models.CharField(blank=True, choices=[(b'AC', 'Accepted'), (b'WA', 'Wrong Answer'), (b'TLE', 'Time Limit Exceeded'), (b'MLE', 'Memory Limit Exceeded'), (b'OLE', 'Output Limit Exceeded'), (b'IR', 'Invalid Return'), (b'RTE', 'Runtime Error'), (b'CE', 'Compile Error'), (b'IE', 'Internal Error'), (b'SC', 'Short circuit'), (b'AB', 'Aborted')], db_index=True, default=None, max_length=3, null=True, verbose_name='result')),
                ('error', models.TextField(blank=True, null=True, verbose_name='compile errors')),
                ('current_testcase', models.IntegerField(default=0)),
                ('batch', models.BooleanField(default=False, verbose_name='batched cases')),
                ('case_points', models.FloatField(default=0, verbose_name='test case points')),
                ('case_total', models.FloatField(default=0, verbose_name='test case total points')),
                ('was_rejudged', models.BooleanField(default=False, verbose_name='was rejudged by admin')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='was ran on pretests only')),
                ('judged_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.Judge', verbose_name='judged on')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Language', verbose_name='submission language')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Profile')),
            ],
            options={
                'verbose_name': 'submission',
                'verbose_name_plural': 'submissions',
                'permissions': (('abort_any_submission', 'Abort any submission'), ('rejudge_submission', 'Rejudge the submission'), ('rejudge_submission_lot', 'Rejudge a lot of submissions'), ('spam_submission', 'Submit without limit'), ('view_all_submission', 'View all submission'), ('resubmit_other', "Resubmit others' submission")),
            },
        ),
        migrations.CreateModel(
            name='SubmissionTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.IntegerField(verbose_name='test case ID')),
                ('status', models.CharField(choices=[(b'AC', 'Accepted'), (b'WA', 'Wrong Answer'), (b'TLE', 'Time Limit Exceeded'), (b'MLE', 'Memory Limit Exceeded'), (b'OLE', 'Output Limit Exceeded'), (b'IR', 'Invalid Return'), (b'RTE', 'Runtime Error'), (b'CE', 'Compile Error'), (b'IE', 'Internal Error'), (b'SC', 'Short circuit'), (b'AB', 'Aborted')], max_length=3, verbose_name='status flag')),
                ('time', models.FloatField(null=True, verbose_name='execution time')),
                ('memory', models.FloatField(null=True, verbose_name='memory usage')),
                ('points', models.FloatField(null=True, verbose_name='points granted')),
                ('total', models.FloatField(null=True, verbose_name='points possible')),
                ('batch', models.IntegerField(null=True, verbose_name='batch number')),
                ('feedback', models.CharField(blank=True, max_length=50, verbose_name='judging feedback')),
                ('output', models.TextField(blank=True, verbose_name='program output')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='judge.Submission', verbose_name='associated submission')),
            ],
            options={
                'verbose_name': 'submission test case',
                'verbose_name_plural': 'submission test cases',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='ticket title')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('notes', models.TextField(blank=True, help_text='Staff notes for this issue to aid in processing.', verbose_name='quick notes')),
                ('object_id', models.PositiveIntegerField(verbose_name='linked item ID')),
                ('is_open', models.BooleanField(default=True, verbose_name='is ticket open?')),
                ('assignees', models.ManyToManyField(related_name='assigned_tickets', to='judge.Profile', verbose_name='assignees')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='linked item type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='judge.Profile', verbose_name='ticket creator')),
            ],
        ),
        migrations.CreateModel(
            name='TicketMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(verbose_name='message body')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='message time')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', related_query_name='message', to='judge.Ticket', verbose_name='ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_messages', to='judge.Profile', verbose_name='poster')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='authors',
            field=models.ManyToManyField(blank=True, related_name='authored_problems', to='judge.Profile', verbose_name='creators'),
        ),
        migrations.AddField(
            model_name='problem',
            name='banned_users',
            field=models.ManyToManyField(blank=True, help_text='Bans the selected users from submitting to this problem', to='judge.Profile', verbose_name='personae non gratae'),
        ),
        migrations.AddField(
            model_name='problem',
            name='curators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit a problem, but not be publicly shown as an author.', related_name='curated_problems', to='judge.Profile', verbose_name='curators'),
        ),
        migrations.AddField(
            model_name='problem',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.ProblemGroup', verbose_name='problem group'),
        ),
        migrations.AddField(
            model_name='problem',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.License'),
        ),
        migrations.AddField(
            model_name='problem',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view a private problem, but not edit it.', related_name='tested_problems', to='judge.Profile', verbose_name='testers'),
        ),
        migrations.AddField(
            model_name='problem',
            name='types',
            field=models.ManyToManyField(to='judge.ProblemType', verbose_name='problem types'),
        ),
        migrations.AddField(
            model_name='privatemessage',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='judge.Profile', verbose_name='sender'),
        ),
        migrations.AddField(
            model_name='privatemessage',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='judge.Profile', verbose_name='target'),
        ),
        migrations.AddField(
            model_name='organizationrequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='judge.Profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='organization',
            name='admins',
            field=models.ManyToManyField(help_text='Those who can edit this organization', related_name='_organization_admins_+', to='judge.Profile', verbose_name='administrators'),
        ),
        migrations.AddField(
            model_name='organization',
            name='registrant',
            field=models.ForeignKey(help_text='User who registered this organization', on_delete=django.db.models.deletion.CASCADE, related_name='registrant+', to='judge.Profile', verbose_name='registrant'),
        ),
        migrations.AddField(
            model_name='languagelimit',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_limits', to='judge.Problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='judge',
            name='problems',
            field=models.ManyToManyField(related_name='judges', to='judge.Problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='judge',
            name='runtimes',
            field=models.ManyToManyField(related_name='judges', to='judge.Language', verbose_name='judges'),
        ),
        migrations.AddField(
            model_name='contestsubmission',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contest', to='judge.Submission', verbose_name='submission'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='judge.Problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_history', to='judge.Profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='contest',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the contest', to='judge.Organization', verbose_name='organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='organizers',
            field=models.ManyToManyField(help_text='These people will be able to edit the contest.', related_name='_contest_organizers_+', to='judge.Profile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='judge.ContestProblem', to='judge.Problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rate_exclude',
            field=models.ManyToManyField(blank=True, related_name='_contest_rate_exclude_+', to='judge.Profile', verbose_name='exclude from ratings'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='contests', to='judge.ContestTag', verbose_name='contest tags'),
        ),
        migrations.AddField(
            model_name='commentvote',
            name='voter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voted_comments', to='judge.Profile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Profile', verbose_name='commenter'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='judge.Comment', verbose_name='parent'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='authors',
            field=models.ManyToManyField(blank=True, to='judge.Profile', verbose_name='authors'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together=set([('user', 'contest')]),
        ),
        migrations.AlterUniqueTogether(
            name='problemtranslation',
            unique_together=set([('problem', 'language')]),
        ),
        migrations.AlterUniqueTogether(
            name='languagelimit',
            unique_together=set([('problem', 'language')]),
        ),
        migrations.AlterUniqueTogether(
            name='contestproblem',
            unique_together=set([('problem', 'contest')]),
        ),
        migrations.AlterUniqueTogether(
            name='contestparticipation',
            unique_together=set([('contest', 'user', 'virtual')]),
        ),
        migrations.AlterUniqueTogether(
            name='commentvote',
            unique_together=set([('voter', 'comment')]),
        ),
    ]
